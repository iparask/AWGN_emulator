-------------------------------------------------------------
-- This file is generated through a matalab script. For    --
-- any problems please contact to paraskeu@ceid.upatras.gr --
-- with subject: create_SNRLUT script. Thank you!          --
-------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_signed.all;
use ieee.numeric_std.all;

entity snrlut is
port ( SNR: in std_logic_vector (5 downto 0);
    sigma: out signed(39 downto 0);
    sigma2: out signed(39 downto 0));
end snrlut;

architecture struct of snrlut is

signal s1,s2: signed( 39 downto 0);

begin

process(SNR)
begin
case SNR is
    when "000000" => s1<="0000000000000000000000000000000000000000"; 
    s2<="1111111100000000000000000000000000000000";
    when "000001" => s1<="0000000010100110000010000111000010110011";
    s2<="1111110110011111011001101010100011011100";
    when "000010" => s1<="0000000010100010010000001110101111001010";
    s2<="1111110110000010101101111111011111111001";
    when "000011" => s1<="0000000010011110100011110110110011100000";
    s2<="1111110101100100101011110011101000110010";
    when "000100" => s1<="0000000010011010111100110111001110011111";
    s2<="1111110101000101001111000010000001110101";
    when "000101" => s1<="0000000010010111011011001000001010011101";
    s2<="1111110100100100010011011001011011101110";
    when "000110" => s1<="0000000010010011111110100001111101001010";
    s2<="1111110100000001110100011011101110111111";
    when "000111" => s1<="0000000010010000100110111101000111100010";
    s2<="1111110011011101101101011101010101001001";
    when "001000" => s1<="0000000010001101010100010010010101011000";
    s2<="1111110010110111111001100100100000000100";
    when "001001" => s1<="0000000010001010000110011010011101001011";
    s2<="1111110010010000010011101000101111010111";
    when "001010" => s1<="0000000010000110111101001110011111110101";
    s2<="1111110001100110110110010010000011110100";
    when "001011" => s1<="0000000010000011111000100111101000011011";
    s2<="1111110000111011011011111000010000101000";
    when "001100" => s1<="0000000010000000111000011111001011111101";
    s2<="1111110000001101111110100010001010100100";
    when "001101" => s1<="0000000001111101111100101110101001001010";
    s2<="1111101111011110011000000100110100110010";
    when "001110" => s1<="0000000001111011000101001111101000010010"; 
    s2<="1111101110101100100010000010101011001000";
    when "001111" => s1<="0000000001111000010001111011111010110110";
    s2<="1111101101111000010101101010101010000100";
    when "010000" => s1<="0000000001110101100010101101011011011011";
    s2<="1111101101000001101011110111010011110111";
    when "010001" => s1<="0000000001110010110111011110001101011110"; 
    s2<="1111101100001000011101001101110011000010";
    when "010010" => s1<="0000000001110000010000001000011101000110"; 
    s2<="1111101011001100100001111100111001111000";
    when "010011" => s1<="0000000001101101101100100110011110111001"; 
    s2<="1111101010001101110001111011111111000001";
    when "010100" => s1<="0000000001101011001100110010101111101101";
    s2<="1111101001001100000100101001110110100111";
    when "010101" => s1<="0000000001101000110000100111110100011110";
    s2<="1111101000000111010001001011101000100000";
    when "010110" => s1<="0000000001100110011000000000011010000001";
    s2<="1111100110111111001110001011100010100101";
    when "010111" => s1<="0000000001100100000010110111010100111001";
    s2<="1111100101110011110001110111100111101101";
    when "011000" => s1<="0000000001100001110001000111100001001111"; 
    s2<="1111100100100100110010000000011010101101";
    when "011001" => s1<="0000000001011111100010101100000010011111";
    s2<="1111100011010010000011110111100101011010";
    when "011010" => s1<="0000000001011101010111100000000011010100";
    s2<="1111100001111011011100001110011011011111";
    when "011011" => s1<="0000000001011011001111011110110101011110";
    s2<="1111100000100000101111010100011000110110";
    when "011100" => s1<="0000000001011001001010100011110001100011";
    s2<="1111011111000001110000110101011011100000";
    when "011101" => s1<="0000000001010111001000101010010110110111"; 
    s2<="1111011101011110010011111000011000100100";
    when "011110" => s1<="0000000001010101001001101110001011010011";
    s2<="1111011011110110001010111101001100010010";
    when "011111" => s1<="0000000001010011001101101010111011001101";
    s2<="1111011010001001000111111011000100101100";
    when "100000" => s1<="0000000001010001010100011100011001001001";
    s2<="1111011000010110111011111110100110110001";
    when "100001" => s1<="0000000001001111011101111110011101110110";
    s2<="1111010110011111010111100111101101111011";
    when "100010" => s1<="0000000001001101101010001101001000000011";
    s2<="1111010100100010001010100111100101001011";
    when "100011" => s1<="0000000001001011111001000100011100010011";
    s2<="1111010010011111000011111110011010010000";
    when "100100" => s1<="0000000001001010001010100000100100111010";
    s2<="1111010000010101110001111001001001110111";
    when "100101" => s1<="0000000001001000011110011101110001110001";
    s2<="1111001110000110000001101111000101000100";
    when "100110" => s1<="0000000001000110110100111000011000001110";
    s2<="1111001011101111011111111111001111011000";
    when "100111" => s1<="0000000001000101001101101100110010111111";
    s2<="1111001001010001111000001101110101001110";
    when "101000" => s1<="0000000001000011101000110111100001111101";
    s2<="1111000110101100110101000001011010010110";
    when "101001" => s1<="0000000001000010000110010101001010001011";
    s2<="1111000100000000000000000000000000000000";
    when "101010" => s1<="0000000001000000100110000010010101100111";
    s2<="1111000001001011000001101100000010001011";
    when "101011" => s1<="0000000000111111000111111011110011001011";
    s2<="1110111110001101100001100001001011110101";
    when "101100" => s1<="0000000000111101101011111110010110011101";
    s2<="1110111011000111000101110001000001011101";
    when "101101" => s1<="0000000000111100010010000110110111110010";
    s2<="1110110111110111010011011111100001011110";
    when "101110" => s1<="0000000000111010111010010010010011111101";
    s2<="1110110100011101101110011111011010010011";
    when "101111" => s1<="0000000000111001100100011101101100010001";
    s2<="1110110000111001111001001110010101001110";
    when "110000" => s1<="0000000000111000010000100110000110010101"; 
    s2<="1110101101001011010100110000110101110010";
    when "110001" => s1<="0000000000110110111110101000101011111111";
    s2<="1110101001010001100000101110001101000100";
    when "110010" => s1<="0000000000110101101110100010101011010001"; 
    s2<="1110100101001011111011001100000000010110";
    when "110011" => s1<="0000000000110100100000010001010110001100";
    s2<="1110100000111010000000101001100010011000";
    when "110100" => s1<="0000000000110011010011110010000010110100";
    s2<="1110011100011011001011111010111110111111";
    when "110101" => s1<="0000000000110010001001000010001010111111"; 
    s2<="1110010111101110110110000100010111110111";
    when "110110" => s1<="0000000000110000111111111111001100011010"; 
    s2<="1110010010110100010110010100010010011000";
    when "110111" => s1<="0000000000101111111000100110101000011010";
    s2<="1110001101101011000001111110010101010100";
    when "111000" => s1<="0000000000101110110010110110000011111110";
    s2<="1110001000010010001100010101010101111010";
    when "111001" => s1<="0000000000101101101110101011000111100111";
    s2<="1110000010101001000110100101010011011110";
    when "111010" => s1<="0000000000101100101100000011011111010000";
    s2<="1101111100101110111111101101000000101101";
    when "111011" => s1<="0000000000101011101010111100111010001110";
    s2<="1101110110100011000100010111011001101110";
    when "111100" => s1<="0000000000101010101011010101001011001001";
    s2<="1101110000000100011110110100100110001011";
    when "111101" => s1<="0000000000101001101101001010000111110110";
    s2<="1101101001010010010110110010100110010001";
    when "111110" => s1<="0000000000101000110000011001101001010011";
    s2<="1101100010001011110001010101101001101110";
    when "111111" => s1<="0000000000100111110101000001101011100100";
    s2<="1101011010101111110000110000001111110101";
    when others => s1 <= (others=>'0'); s2 <= (others=>'0');
end case;
end process;

sigma<=s1;
sigma2<=s2;
end struct;
